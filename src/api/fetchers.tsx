/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";
export interface CreatePostDto {
  /**
   * This is title for post
   */
  title: string;
  description: string;
}

// tslint:disable-next-line:no-empty-interface
export interface UpdatePostDto {}

export interface RegisterAuthDto {
  email: string;
  password1: string;
  password2: string;
}

export type PostsControllerCreateProps = Omit<MutateProps<number, unknown, void, CreatePostDto, void>, "path" | "verb">;

export const PostsControllerCreate = (props: PostsControllerCreateProps) => (
  <Mutate<number, unknown, void, CreatePostDto, void>
    verb="POST"
    path={`/posts`}
    
    {...props}
  />
);

export type UsePostsControllerCreateProps = Omit<UseMutateProps<number, unknown, void, CreatePostDto, void>, "path" | "verb">;

export const usePostsControllerCreate = (props: UsePostsControllerCreateProps) => useMutate<number, unknown, void, CreatePostDto, void>("POST", `/posts`, props);


export interface PostsControllerFindAllResponse {[key: string]: any}[]

export type PostsControllerFindAllProps = Omit<GetProps<PostsControllerFindAllResponse, unknown, void, void>, "path">;

export const PostsControllerFindAll = (props: PostsControllerFindAllProps) => (
  <Get<PostsControllerFindAllResponse, unknown, void, void>
    path={`/posts`}
    
    {...props}
  />
);

export type UsePostsControllerFindAllProps = Omit<UseGetProps<PostsControllerFindAllResponse, unknown, void, void>, "path">;

export const usePostsControllerFindAll = (props: UsePostsControllerFindAllProps) => useGet<PostsControllerFindAllResponse, unknown, void, void>(`/posts`, props);


export interface PostsControllerFindOnePathParams {
  id: string
}

export type PostsControllerFindOneProps = Omit<GetProps<string, unknown, void, PostsControllerFindOnePathParams>, "path"> & PostsControllerFindOnePathParams;

export const PostsControllerFindOne = ({id, ...props}: PostsControllerFindOneProps) => (
  <Get<string, unknown, void, PostsControllerFindOnePathParams>
    path={`/posts/${id}`}
    
    {...props}
  />
);

export type UsePostsControllerFindOneProps = Omit<UseGetProps<string, unknown, void, PostsControllerFindOnePathParams>, "path"> & PostsControllerFindOnePathParams;

export const usePostsControllerFindOne = ({id, ...props}: UsePostsControllerFindOneProps) => useGet<string, unknown, void, PostsControllerFindOnePathParams>((paramsInPath: PostsControllerFindOnePathParams) => `/posts/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export interface PostsControllerUpdatePathParams {
  id: string
}

export type PostsControllerUpdateProps = Omit<MutateProps<string, unknown, void, UpdatePostDto, PostsControllerUpdatePathParams>, "path" | "verb"> & PostsControllerUpdatePathParams;

export const PostsControllerUpdate = ({id, ...props}: PostsControllerUpdateProps) => (
  <Mutate<string, unknown, void, UpdatePostDto, PostsControllerUpdatePathParams>
    verb="PUT"
    path={`/posts/${id}`}
    
    {...props}
  />
);

export type UsePostsControllerUpdateProps = Omit<UseMutateProps<string, unknown, void, UpdatePostDto, PostsControllerUpdatePathParams>, "path" | "verb"> & PostsControllerUpdatePathParams;

export const usePostsControllerUpdate = ({id, ...props}: UsePostsControllerUpdateProps) => useMutate<string, unknown, void, UpdatePostDto, PostsControllerUpdatePathParams>("PUT", (paramsInPath: PostsControllerUpdatePathParams) => `/posts/${paramsInPath.id}`, {  pathParams: { id }, ...props });


export type PostsControllerRemoveProps = Omit<MutateProps<string, unknown, void, string, void>, "path" | "verb">;

export const PostsControllerRemove = (props: PostsControllerRemoveProps) => (
  <Mutate<string, unknown, void, string, void>
    verb="DELETE"
    path={`/posts`}
    
    {...props}
  />
);

export type UsePostsControllerRemoveProps = Omit<UseMutateProps<string, unknown, void, string, void>, "path" | "verb">;

export const usePostsControllerRemove = (props: UsePostsControllerRemoveProps) => useMutate<string, unknown, void, string, void>("DELETE", `/posts`, {   ...props });


export type AuthControllerLoginProps = Omit<MutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const AuthControllerLogin = (props: AuthControllerLoginProps) => (
  <Mutate<void, unknown, void, void, void>
    verb="POST"
    path={`/auth/login`}
    
    {...props}
  />
);

export type UseAuthControllerLoginProps = Omit<UseMutateProps<void, unknown, void, void, void>, "path" | "verb">;

export const useAuthControllerLogin = (props: UseAuthControllerLoginProps) => useMutate<void, unknown, void, void, void>("POST", `/auth/login`, props);


export type AuthControllerRegistrationProps = Omit<MutateProps<RegisterAuthDto, unknown, void, RegisterAuthDto, void>, "path" | "verb">;

export const AuthControllerRegistration = (props: AuthControllerRegistrationProps) => (
  <Mutate<RegisterAuthDto, unknown, void, RegisterAuthDto, void>
    verb="POST"
    path={`/auth/registration`}
    
    {...props}
  />
);

export type UseAuthControllerRegistrationProps = Omit<UseMutateProps<RegisterAuthDto, unknown, void, RegisterAuthDto, void>, "path" | "verb">;

export const useAuthControllerRegistration = (props: UseAuthControllerRegistrationProps) => useMutate<RegisterAuthDto, unknown, void, RegisterAuthDto, void>("POST", `/auth/registration`, props);


export interface UsersControllerGetProfileResponse {[key: string]: any}

export type UsersControllerGetProfileProps = Omit<GetProps<UsersControllerGetProfileResponse, unknown, void, void>, "path">;

export const UsersControllerGetProfile = (props: UsersControllerGetProfileProps) => (
  <Get<UsersControllerGetProfileResponse, unknown, void, void>
    path={`/users/profile`}
    
    {...props}
  />
);

export type UseUsersControllerGetProfileProps = Omit<UseGetProps<UsersControllerGetProfileResponse, unknown, void, void>, "path">;

export const useUsersControllerGetProfile = (props: UseUsersControllerGetProfileProps) => useGet<UsersControllerGetProfileResponse, unknown, void, void>(`/users/profile`, props);

